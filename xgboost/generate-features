#!/usr/bin/env bash
set -euo pipefail
cd $(dirname $(realpath $0))
msg () {
  echo "[$(date -Is)] $(basename $0): $*" >&2
}

msg "Generate feature generators"
# rm -rf aggs features
# time Rscript prepare-feature-generation.R

msg "Generate aggregated series"
# time find aggs -name '*-mk.R' \
#   | parallel -j2 --eta \
#     Rscript

msg "Generate features"
for ftr in $(find features -mindepth 1 -maxdepth 1 -type d)
do
  # if build was started but not completed, remove everything
  # and redo
  if [ -f "$ftr/build-start" ] && [ ! -f "$ftr/build-end" ]
  then
    find "$ftr" -mindepth 1 -type d -exec rm -rf {} \;
  fi

  # if build start token is missing; build
  if [ ! -f "$ftr/build-start" ]
  then
    # feature needs to be built
    echo "$(date -Is)" >"$ftr/build-start"

    msg "Generating $ftr"
    ftrmkrs="$ftr/makers"
    find "$ftr" -name '*-mk.R' >"$ftrmkrs"
    msg "$(<$ftrmkrs wc -l | tr -d \ ) scripts to run"

    # Being quite convervative with the parellelism here
    # This is for two reasons:
    # - so my machine doesn't lock up while building
    # - so I have some spare compute/memory to play
    #   with features as they are built.
    time cat "$ftrmkrs" \
      | parallel -j4 --eta \
        Rscript
  fi

  msg "Collect results for $ftr by day"
  find "$ftr" -mindepth 1 -maxdepth 1 -type d \
    | parallel -j6 --eta \
      Rscript collect-feature-date.R

  msg "Done generating $ftr"
  echo "$(date -Is)" >"$ftr/build-end"
done

